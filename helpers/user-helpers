var db = require('../config/connections')
var collection = require('../config/collection')
const bcrypt = require('bcrypt')
var objectId=require('mongodb').ObjectId

module.exports = {
    doSignup: (userData) => {

        return new Promise(async(resolve, reject) => {
            userData.Password = await bcrypt.hash(userData.Password, 10)
            db.get().collection(collection.USER_COLLECTION).findOne({Email:userData.Email}).then((response)=>{
              if(response)  {
                resolve(response)
              }
              else{
                console.log(userData)
            db.get().collection(collection.USER_COLLECTION).insertOne(userData).then((data)=>{
            resolve(data)
           }) 

              }
            })
            
            
        })
        // return new Promise(async (resolve, reject) => {
        //     userData.Password = await bcrypt.hash(userData.Password, 10)
        //     db.get().collection(collection.USER_COLLECTION).insertOne(userData).then((data) => {

        //         resolve()

        //     })

        // })

    },
    doLogin:(userData)=>{
       
        return new Promise(async(resolve, reject) => {
            let loginStatus=false
            let response={}

            let user=await db.get().collection(collection.USER_COLLECTION).findOne({Email:userData.Email})
            console.log(user)
            if(user){
                bcrypt.compare(userData.Password,user.Password).then((status)=>{
                    if(status){
                        console.log("login correct")
                        response.user=user
                        response.status=true
                        resolve(response)
                    }
                    else{
                        console.log("login failedwwwwwwww")
                        resolve({status:false})
                    }

                })
           }else{
            console.log("login failed else")
            resolve({status:false})
           }
            
        })
    },
    // getAllUsers:(uId)=>{
    //     return new Promise((resolve, reject) => {
    //         let users=db.get().collection(collection.USER_COLLECTION).find().toArray()
    //         resolve(users)

            
    //     })

    // },



    // deleteUser:(uId)=>{
    //     return new Promise((resolve,reject)=>{
    //         console.log(uId)
    //         console.log(objectId(uId));

    //         db.get().collection(collection.USER_COLLECTION).deleteOne({_id:objectId(uId) }).then((response)=>{
    //             console.log(response);
    //             resolve(response)
    //         })
    //     })
    // }

}